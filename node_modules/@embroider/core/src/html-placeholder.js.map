{"version":3,"file":"html-placeholder.js","sourceRoot":"","sources":["html-placeholder.ts"],"names":[],"mappings":"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","sourcesContent":["export default class Placeholder {\n  end: InDOMNode;\n  start: StartNode;\n\n  // remove the target Element from the DOM, and track where it was so we can\n  // update that location later.\n  constructor(private target: HTMLElement) {\n    if (!target.ownerDocument || !target.parentElement) {\n      throw new Error('can only construct a placeholder for an element that is in DOM');\n    }\n    let start = target.ownerDocument.createTextNode('');\n    target.parentElement.insertBefore(start, target);\n    let endNode = target.ownerDocument.createTextNode('');\n    target.replaceWith(endNode);\n\n    // Type cast is justified because start always has a nextSibling (it's\n    // \"end\") and because we know we already inserted the node.\n    this.start = start as StartNode;\n\n    // Type cast is justified because we know we already inserted the node.\n    this.end = endNode as InDOMNode;\n  }\n\n  reset() {\n    this.clear();\n    this.insert(this.target);\n  }\n\n  clear() {\n    while (this.start.nextSibling !== this.end) {\n      this.start.parentElement.removeChild(this.start.nextSibling);\n    }\n  }\n\n  insert(node: Node): void {\n    this.end.parentElement.insertBefore(node, this.end);\n  }\n\n  appendToHead(node: Node): void {\n    this.end.ownerDocument.head.appendChild(node);\n  }\n\n  isScript(): boolean {\n    return this.target.tagName === 'SCRIPT';\n  }\n\n  insertURL(url: string) {\n    if (url.endsWith('.js')) {\n      return this.insertScriptTag(url);\n    }\n    if (url.endsWith('.css')) {\n      return this.insertStyleLink(url);\n    }\n    throw new Error(`don't know how to insertURL ${url}`);\n  }\n\n  insertScriptTag(src: string) {\n    let newTag = this.end.ownerDocument.createElement('script');\n    for (let { name, value } of [...this.target.attributes]) {\n      if (name === 'type' && value === 'module') {\n        // we always convert modules to scripts\n        continue;\n      }\n      // all other attributes are copied forward unchanged\n      newTag.setAttribute(name, value);\n    }\n    newTag.src = src;\n    this.insert(newTag);\n    this.insertNewline();\n    return newTag;\n  }\n\n  insertStyleLink(href: string) {\n    let newTag = this.end.ownerDocument.createElement('link');\n    newTag.href = href;\n    newTag.rel = 'stylesheet';\n\n    if (this.isScript()) {\n      // Add dynamic styles from scripts to the bottom of the head, and not to where the script was,\n      // to prevent FOUC when pre-rendering (FastBoot)\n      this.appendToHead(newTag);\n    } else {\n      // Keep the new style in the same place as the original one\n      this.insert(newTag);\n    }\n    this.insertNewline(newTag as InDOMNode);\n  }\n\n  insertNewline(node: InDOMNode = this.end): void {\n    node.parentElement.insertBefore(node.ownerDocument.createTextNode('\\n'), node);\n  }\n}\n\n// an html node that's definitely inserted into the DOM\ninterface InDOMNode extends Node {\n  parentElement: HTMLElement;\n  ownerDocument: Document;\n}\n\n// an html node that definitely has a next sibling.\ninterface StartNode extends InDOMNode {\n  nextSibling: InDOMNode & ChildNode;\n}\n"]}