{"version":3,"file":"ember-html.js","sourceRoot":"","sources":["ember-html.ts"],"names":[],"mappings":"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","sourcesContent":["import { JSDOM } from 'jsdom';\nimport { readFileSync } from 'fs';\nimport type { EmberAsset } from './asset';\n\nexport interface EmberHTML {\n  // each of the Nodes in here points at where we should insert the\n  // corresponding parts of the ember app. The Nodes themselves will be\n  // replaced, so provide placeholders.\n\n  // these are mandatory, the Ember app may need to put things into them.\n  javascript: Node;\n  styles: Node;\n  implicitScripts: Node;\n  implicitStyles: Node;\n\n  // these are optional because you *may* choose to stick your implicit test\n  // things into specific locations (which we need for backward-compat). But you\n  // can leave these off and we will simply put them in the same places as the\n  // non-test things.\n  //\n  // Do not confuse these with controlling whether or not we will insert tests.\n  // That is separately controlled via `includeTests`.\n  testJavascript?: Node;\n  implicitTestScripts?: Node;\n  implicitTestStyles?: Node;\n}\n\nclass NodeRange {\n  end: Node;\n  start: Node;\n  constructor(initial: Node) {\n    this.start = initial.ownerDocument!.createTextNode('');\n    initial.parentElement!.insertBefore(this.start, initial);\n    this.end = initial;\n  }\n  clear() {\n    while (this.start.nextSibling !== this.end) {\n      this.start.parentElement!.removeChild(this.start.nextSibling!);\n    }\n  }\n  insert(node: Node) {\n    this.end.parentElement!.insertBefore(node, this.end);\n  }\n}\n\nfunction immediatelyAfter(node: Node) {\n  let newMarker = node.ownerDocument!.createTextNode('');\n  node.parentElement!.insertBefore(newMarker, node.nextSibling);\n  return new NodeRange(newMarker);\n}\n\nexport class PreparedEmberHTML {\n  dom: JSDOM;\n  javascript: NodeRange;\n  styles: NodeRange;\n  implicitScripts: NodeRange;\n  implicitStyles: NodeRange;\n  testJavascript: NodeRange;\n  implicitTestScripts: NodeRange;\n  implicitTestStyles: NodeRange;\n\n  constructor(private asset: EmberAsset) {\n    this.dom = new JSDOM(readFileSync(asset.sourcePath, 'utf8'));\n    let html = asset.prepare(this.dom);\n    this.javascript = new NodeRange(html.javascript);\n    this.styles = new NodeRange(html.styles);\n    this.implicitScripts = new NodeRange(html.implicitScripts);\n    this.implicitStyles = new NodeRange(html.implicitStyles);\n    this.testJavascript = html.testJavascript ? new NodeRange(html.testJavascript) : immediatelyAfter(html.javascript);\n    this.implicitTestScripts = html.implicitTestScripts\n      ? new NodeRange(html.implicitTestScripts)\n      : immediatelyAfter(html.implicitScripts);\n    this.implicitTestStyles = html.implicitTestStyles\n      ? new NodeRange(html.implicitTestStyles)\n      : immediatelyAfter(html.implicitStyles);\n  }\n\n  private allRanges(): NodeRange[] {\n    return [\n      this.javascript,\n      this.styles,\n      this.implicitScripts,\n      this.implicitStyles,\n      this.implicitTestScripts,\n      this.implicitTestStyles,\n      this.testJavascript,\n    ];\n  }\n\n  clear() {\n    for (let range of this.allRanges()) {\n      range.clear();\n    }\n  }\n\n  // this takes the src relative to the application root, we adjust it so it's\n  // root-relative via the configured rootURL\n  insertScriptTag(location: NodeRange, relativeSrc: string, opts?: { type?: string; tag?: string }) {\n    let newTag = this.dom.window.document.createElement(opts && opts.tag ? opts.tag : 'script');\n    newTag.setAttribute('src', this.asset.rootURL + relativeSrc);\n    if (opts && opts.type) {\n      newTag.setAttribute('type', opts.type);\n    }\n    location.insert(this.dom.window.document.createTextNode('\\n'));\n    location.insert(newTag);\n  }\n\n  // this takes the href relative to the application root, we adjust it so it's\n  // root-relative via the configured rootURL\n  insertStyleLink(location: NodeRange, relativeHref: string) {\n    let newTag = this.dom.window.document.createElement('link');\n    newTag.rel = 'stylesheet';\n    newTag.href = this.asset.rootURL + relativeHref;\n    location.insert(this.dom.window.document.createTextNode('\\n'));\n    location.insert(newTag);\n  }\n}\n\nexport function insertNewline(at: Node) {\n  at.parentElement!.insertBefore(at.ownerDocument!.createTextNode('\\n'), at);\n}\n"]}