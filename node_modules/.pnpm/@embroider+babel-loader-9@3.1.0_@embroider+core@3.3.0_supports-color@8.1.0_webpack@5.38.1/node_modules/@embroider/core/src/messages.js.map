{"version":3,"file":"messages.js","sourceRoot":"","sources":["messages.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA8B;AAC9B,+BAA8B;AAE9B,MAAM,IAAI,GAAG,IAAA,eAAS,EAAC,gBAAgB,CAAC,CAAC;AA8DhC,oBAAI;AA7Db,MAAM,WAAW,GAAG,IAAA,eAAS,EAAC,uBAAuB,CAAC,CAAC;AA6DxC,kCAAW;AA5D1B,MAAM,KAAK,GAAG,IAAA,eAAS,EAAC,iBAAiB,CAAC,CAAC;AA4Df,sBAAK;AA1DjC,SAAS,QAAQ,CAAC,OAAe,EAAE,MAAa;IAC9C,IAAI,YAAY,GAAG,CAAC,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,qCAAqC,IAAA,aAAM,EAAC,OAAO,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;KACpF;SAAM;QACL,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAA,aAAM,EAAC,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;KACvD;AACH,CAAC;AAED,IAAI,WAAW,GAAG,EAAc,CAAC;AACjC,IAAI,OAAO,GAAoB,IAAI,OAAO,EAAE,CAAC;AAE7C,SAAS,YAAY,CAAC,OAAe,EAAE,MAAa;IAClD,IAAI,gBAAgB,GAAG,IAAA,aAAM,EAAC,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;IAClD,KAAK,IAAI,OAAO,IAAI,WAAW,EAAE;QAC/B,IAAI,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE;YAClC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrB,OAAO;SACR;KACF;IACD,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AAC5B,CAAC;AAED,SAAgB,IAAI,CAAC,OAAe,EAAE,GAAG,MAAa;IACpD,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,QAAQ,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;KAC3B;SAAM;QACL,YAAY,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;KAC/B;AACH,CAAC;AAND,oBAMC;AAED,6BAA6B;AAC7B,IAAI,YAAY,GAAG,CAAC,CAAC;AACrB,SAAgB,eAAe,CAAC,KAAmB;IACjD,IAAI,KAAK,EAAE;QACT,aAAa;QACb,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE;YAChB,YAAY,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE;YACf,YAAY,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,YAAY;QACZ,SAAS,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC;QAChC,QAAQ,CAAC,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC;KAChC;AACH,CAAC;AAdD,0CAcC;AAED,SAAgB,aAAa,CAAC,OAAe,EAAE,EAAc;IAC3D,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC1B,IAAI;QACF,EAAE,EAAE,CAAC;KACN;YAAS;QACR,WAAW,CAAC,GAAG,EAAE,CAAC;KACnB;IACD,OAAO,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,CAAC;AARD,sCAQC","sourcesContent":["import makeDebug from 'debug';\nimport { format } from 'util';\n\nconst todo = makeDebug('embroider:todo');\nconst unsupported = makeDebug('embroider:unsupported');\nconst debug = makeDebug('embroider:debug');\n\nfunction realWarn(message: string, params: any[]) {\n  if (hardFailMode > 0) {\n    throw new Error(`Unexpected warning in test suite: ${format(message, ...params)}`);\n  } else {\n    console.log('WARNING: ' + format(message, ...params));\n  }\n}\n\nlet expectStack = [] as RegExp[];\nlet handled: WeakSet<RegExp> = new WeakSet();\n\nfunction expectedWarn(message: string, params: any[]) {\n  let formattedMessage = format(message, ...params);\n  for (let pattern of expectStack) {\n    if (pattern.test(formattedMessage)) {\n      handled.add(pattern);\n      return;\n    }\n  }\n  realWarn(message, params);\n}\n\nexport function warn(message: string, ...params: any[]) {\n  if (expectStack.length === 0) {\n    realWarn(message, params);\n  } else {\n    expectedWarn(message, params);\n  }\n}\n\n// for use in our test suites\nlet hardFailMode = 0;\nexport function throwOnWarnings(hooks?: NestedHooks) {\n  if (hooks) {\n    // qunit mode\n    hooks.before(() => {\n      hardFailMode++;\n    });\n    hooks.after(() => {\n      hardFailMode--;\n    });\n  } else {\n    // Jest mode\n    beforeAll(() => hardFailMode++);\n    afterAll(() => hardFailMode--);\n  }\n}\n\nexport function expectWarning(pattern: RegExp, fn: () => void) {\n  expectStack.push(pattern);\n  try {\n    fn();\n  } finally {\n    expectStack.pop();\n  }\n  return handled.has(pattern);\n}\n\nexport { todo, unsupported, debug };\n"]}