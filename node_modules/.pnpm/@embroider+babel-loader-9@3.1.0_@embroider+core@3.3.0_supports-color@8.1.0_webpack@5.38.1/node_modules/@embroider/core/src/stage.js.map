{"version":3,"file":"stage.js","sourceRoot":"","sources":["stage.ts"],"names":[],"mappings":"","sourcesContent":["import type { Node } from 'broccoli-node-api';\n\n// A build Stage is _kinda_ like a Broccoli transform, and it interoperates with\n// Broccoli, but it takes a different approach to how stages combine.\n//\n// Conceptually, normal broccoli transforms pass trees by value (meaning they\n// always get copied) whereas Stages pass trees by reference (meaning they can\n// be borrowed and mutated).\n//\n// This would be potentially bad if abused, but we are only using them for\n// precisely three well-defined stages, where each has clear responsibilities.\n//\nexport default interface Stage {\n  // this is the broccoli tree that must get built for the Stage to be ready.\n  // But! This tree's output path is _not_ necessarily where the Stage's output\n  // will be, for that you must wait for `outputPath`.\n  readonly tree: Node;\n\n  // this is where our stage was reading from. Subsequent stages are also\n  // allowed to read from here in addition to reading from our `outputPath`.\n  readonly inputPath: string;\n\n  // this promise is only guaranteed to resolve if you cause `tree` to be\n  // included in a broccoli build.\n  ready(): Promise<{\n    // This is the actual directory in which the output will be. It's guaranteed\n    // to not change once you get it.\n    readonly outputPath: string;\n  }>;\n}\n"]}